name: Contributor Metrics in PSM
 
on:
  push:
    branches:
      - '**'
defaults:
   run:
     shell: bash
 
permissions:
   contents: write
   actions: read
 
env:
   ORG_NAME: "openpitrix"
   GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
   TARGET_DATE: "2018-01-01T00:00:00Z"
jobs:
   Get-Metrics:
     runs-on: ubuntu-latest 
     timeout-minutes: 120
 
     # Steps represent a sequence of tasks that will be executed as part of the job
     steps:
       - name: Checkout Code
         uses: actions/checkout@v4
 
      #  - name: Initialize
      #    run: |
      #      GITHUB_USER_EMAIL= "racharlasputhnika27@gmail.com"
      #      GITHUB_USER_NAME="shivani-acr"
      #      pip install yq
      #      git config --global user.email "$GITHUB_USER_EMAIL"
      #      git config --global user.name "$GITHUB_USER_NAME"
 
       - name: Install jq
         run: sudo apt update && sudo apt install -y jq
       - name: Set up UTF-8 locale
         run: |
           sudo locale-gen en_US.UTF-8
           sudo update-locale LANG=en_US.UTF-8
       - name: List Repositories
         run: |
          page=1
          while :; do
            result=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GH_TOKEN}" \
              "https://api.github.com/orgs/$ORG_NAME/repos?per_page=100&page=${page}")
            repolist=$(echo "$result" | jq -r '.[] | "\(.id),\(.name)"')
            echo "$repolist"
            if [[ -z "$repolist" ]]; then
              break
            fi
            echo "$repolist" >> repo_list.txt
            page=$((page + 1))
          done
       - name: List members
         run: |
            echo "libangrui" >> members.txt
            echo "chai2010" >> members.txt
            echo "runzexia" >> members.txt
            echo "zheng1" >> members.txt
            echo "leoendless" >> members.txt
            echo "abc" >> members.txt
       - name: Number of Code reviews of every user.
         run: |
           declare -A string_count
           declare -A user_commented_count
           while read -r USERNAME;do
               string_count[$USERNAME]=0
               user_commented_count[$USERNAME]=0
           done < members.txt
           while IFS=, read -r id REPO; do
             test=1
             echo "reviewers for $REPO"
             page=1
             PRs=""
             flag=""
             while :; do
               API_RESPONSE=$(curl --silent --request GET \
                       --url "https://api.github.com/repositories/${id}/pulls?state=all&page=${page}" \
                       --header "Accept: application/vnd.github+json" \
                       --header "Authorization: Bearer $GH_TOKEN")
              #  echo "$API_RESPONSE"
               PRs=$(echo "$API_RESPONSE" | jq -r --arg date "$TARGET_DATE" '.[] | select(.created_at >= $date) | .number')
               createddate=$(echo "$API_RESPONSE" | jq -r --arg date "$TARGET_DATE" '.[] | select(.created_at >= $date) | .created_at')
               echo "$createddate"
               if [[ -z "$PRs" ]]; then
                 # echo "No more  PR found for this --$REPO-- {{$page}}"
                 break
               fi
               page=$((page + 1))
               flag="$PRs"
               echo "$PRs"
               echo "$PRs" >> PRs.txt
               has_older=$(echo "$API_RESPONSE" | jq -r --arg date "$TARGET_DATE" '.[] | select(.created_at < $date)' | wc -l)
               if [[ "$has_older" -gt 0 ]]; then
                 echo "has_older"
                 break
               fi
             done
             if [[ -z "$flag" ]]; then
                 echo "No PR found for this $REPO"
                 continue
             fi
             flag1=""
             flagc=""
             while read -r PR_NUMBER; do
               API_RESPONSE1=$(curl --silent --request GET \
                     --url "https://api.github.com/repositories/${id}/pulls/${PR_NUMBER}" \
                     --header "Accept: application/vnd.github+json" \
                     --header "Authorization: Bearer $GH_TOKEN")
               API_RESPONSE2=$(curl --silent --request GET \
                     --url "https://api.github.com/repositories/${id}/pulls/${PR_NUMBER}/reviews" \
                     --header "Accept: application/vnd.github+json" \
                     --header "Authorization: Bearer $GH_TOKEN")
               page=1
               while :; do
                 API_RESPONSE3=$(curl --silent --request GET \
                       --url "https://api.github.com/repositories/${id}/pulls/${PR_NUMBER}/comments?page=${page}" \
                       --header "Accept: application/vnd.github+json" \
                       --header "Authorization: Bearer $GH_TOKEN")
                 # echo "$API_RESPONSE3"
                 revComments=$(echo "$API_RESPONSE3" | jq -r '.[] | .user.login')
                 page=$((page + 1))
                 if [[ -z "$revComments" ]]; then
                    break
                 fi
                 flagc="$revComments"
                 echo "$revComments" >> commented_users.txt
               done
               echo "1"
               requested_reviewers=$(echo "$API_RESPONSE1" | jq -r '.requested_reviewers[]?.login // empty')
               if [[ -n "$requested_reviewers" ]]; then
                 flag1="$requested_reviewers"]
                  echo "2"
                  echo "$requested_reviewers" 
                 echo "$requested_reviewers" >> reviewers.txt
               fi
               requested_reviewers2=$(echo "$API_RESPONSE2" | jq -r 'if type=="array" then .[] | .user.login else empty end')
               if [[ -n "$requested_reviewers2" ]]; then
                 flag1="$requested_reviewers2"
                 echo "3"
                 echo "$requested_reviewers2"
                 echo "$requested_reviewers2"  >> reviewers.txt
               fi
             done < PRs.txt
             rm -f PRs.txt
             add_or_update_string() {
               local str="$1"
               if [[ -n "${string_count[$str]}" ]]; then
                  string_count[$str]=$((string_count[$str] + 1))
               else
                  string_count[$str]=1
               fi
             }
             add_or_update_strings() {
                   local str="$1"
                 if [[ -n "${user_commented_count[$str]}" ]]; then
                   user_commented_count[$str]=$((user_commented_count[$str] + 1))
                 else
                   user_commented_count[$str]=1
                 fi
             }
             
             if [[ -n "$flag1" ]]; then
                 # echo "No reviewers"
                 while read -r UserName;do
                     add_or_update_string "$UserName"
                 done < reviewers.txt
                 rm -f reviewers.txt
             fi
             if [[ -n "$flagc" ]]; then
                 while read -r UserName;do
                   add_or_update_strings "$UserName"
                 done < commented_users.txt
                 rm -f commented_users.txt
             fi
             if [[ $test -eq 2 ]]; then
              break
             fi
             test=$((test + 1))
           done < repo_list.txt
           for key in "${!string_count[@]}"; do
               echo "$key: ${string_count[$key]}"
           done
           key="abc"
           echo "$string_count[$key]"
           echo "commenters"
           for key in "${!user_commented_count[@]}"; do
               echo "$key: ${user_commented_count[$key]}"
           done
           echo "output"
           while read -r USER_NAME ; do
              echo "$USER_NAME,${string_count[$USER_NAME]},${user_commented_count[$USER_NAME]}"
              echo "$USER_NAME,${string_count[$USER_NAME]},${user_commented_count[$USER_NAME]}" >> commit_pr_mpr_rev.txt
           done < members.txt
 
      #  - name: Each User code contributions
      #    run: |
      #      declare -A code_count
      #      declare -A repo_contri_count
      #      add_or_update_code_count() {
      #        local str="$1"
      #        local lines="$2"
      #        if [[ -n "${code_count[$str]}" ]]; then
      #           code_count[$str]=$((code_count[$str] + lines))
      #        else
      #           code_count[$str]=$lines
      #        fi
      #      }
      #      add_or_update_repo_contri_count() {
      #        local str="$1"
      #        if [[ -n "${repo_contri_count[$str]}" ]]; then
      #           repo_contri_count[$str]=$((repo_contri_count[$str] + 1))
      #        else
      #           repo_contri_count[$str]=1
      #        fi
      #      }
      #      mkdir -p org-repos
      #      cd org-repos
      #      while IFS=, read -r id REPO; do
      #        git clone --quiet "https://${GH_TOKEN}@github.com/${ORG_NAME}/$REPO.git"
      #        cd "$REPO" || continue
      #        authors_emails=$(git log --since="$TARGET_DATE" --format='%aE' | sort -u)
      #        for author in $authors_emails; do
      #          if [[ "$author" != *@accenture.com ]]; then
      #            continue
      #          fi
      #          lines=$(git log --since="$TARGET_DATE" --author="$author" --pretty=tformat: --numstat \
      #            | awk '{added+=$1; deleted+=$2} END {print added + deleted}')
      #          if [[ $lines -ne 0 ]]; then
      #              add_or_update_repo_contri_count "$author"
      #              add_or_update_code_count "$author" "$lines"
      #          fi
      #        done
      #        cd ..
      #      done < ../repo_list.txt
      #      echo "email code_counts repo_contri_counts "
      #      for key in "${!repo_contri_count[@]}"; do
      #        echo "$key: ${code_count[$key]} , ${repo_contri_count[$key]}"
      #      done
      #      cd ..
      #      declare -A user_name_mapping
      #      declare -A Team_Mapping
      #      CONFLUENCE_USER=${{ secrets.CONFLUENCE_USER }}
      #      CONFLUENCE_API_TOKEN=${{ secrets.CONFLUENCE_API_TOKEN }}
      #      html=$(curl -s -u $CONFLUENCE_USER:$CONFLUENCE_API_TOKEN \
      #                     -H "Accept: application/json" \
      #                     -X GET https://hps0012037344.atlassian.net/wiki/rest/api/content/203887854?expand=body.storage | \
      #                     jq -r '.body.storage.value')
      #      # === Extract rows from HTML using xmlstarlet ===
      #      #  echo "$html"
      #      rows=$(echo "$html" | grep -oP '(?<=<tr>).*?(?=</tr>)' | tail -n +2)
      #      confluence_output=$(echo "$rows" | sed -E 's/<[^>]+>/ /g' |
      #      tr '\n' ' ' | tr -s ' ' |
      #      awk '{
      #        for (i=1; i<=NF; i+=4) {
      #          print $(i+1) "," $(i+2) "," $(i+3)
      #        }
      #      }')
      #      echo "$confluence_output"
      #      echo "$confluence_output" >> confluence_output.txt
      #      while read -r USER_NAME;do
      #         user_name_mapping[$USER_NAME]="null"
      #         Team_Mapping[$USER_NAME]="null"
      #      done < members.txt
      #      while IFS=, read -r EMAIL USER_NAME TEAM; do
      #         user_name_mapping[$USER_NAME]=$EMAIL
      #         Team_Mapping[$USER_NAME]=$TEAM
      #      done < confluence_output.txt
      #      echo "USER_NAME,TEAM,DATE_FROM,COMMITS,PRS_CREATED,MERGED_PRS,REVIEWED_PRS,COMMENTED,CODE_CONTRIBUTED,REPOS_CONTRIBUTED" >> output.csv
      #      while IFS=, read -r USER_NAME COMMIT_COUNT PR_COUNT MPR_Count REVIEW_Count Comment_Count; do
      #         CODE_COUNT=${code_count[${user_name_mapping[$USER_NAME]}]}
      #         REPO_CONTRI=${repo_contri_count[${user_name_mapping[$USER_NAME]}]}
      #         echo "$USER_NAME,${Team_Mapping[$USER_NAME]},$TARGET_DATE,$COMMIT_COUNT,$PR_COUNT,$MPR_Count,$REVIEW_Count,$Comment_Count,$CODE_COUNT,$REPO_CONTRI"
      #         echo "$USER_NAME,${Team_Mapping[$USER_NAME]},$TARGET_DATE,$COMMIT_COUNT,$PR_COUNT,$MPR_Count,$REVIEW_Count,$Comment_Count,$CODE_COUNT,$REPO_CONTRI" >> output.csv
      #      done < commit_pr_mpr_rev.txt

